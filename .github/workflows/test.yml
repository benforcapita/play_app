name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.19.0'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests with coverage
      run: npm run test:coverage -- --watch=false --browsers=ChromeHeadless
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        directory: ./coverage
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.19.0'
        cache: 'npm'
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.x'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium
    
    - name: Install EF Core tools
      run: dotnet tool install --global dotnet-ef
    
    - name: Build .NET API
      run: |
        cd api
        dotnet restore
        dotnet build --configuration Release
    
    # Skip database migrations for testing - using in-memory database instead
    
    - name: Start .NET API Server
      run: |
        cd api
        dotnet run --project play_app_api --configuration Release --no-launch-profile &
      env:
        ASPNETCORE_ENVIRONMENT: Testing
    
    - name: Wait for API to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:5000/ping; do sleep 1; done' || echo "API not ready, continuing with UI-only tests"
    
    - name: Start Angular application
      run: npm run start &
      env:
        NODE_ENV: testing
    
    - name: Wait for application to be ready
      run: npx wait-on http://localhost:4200 --timeout 60000
    
    - name: Run E2E tests
      run: npm run test:e2e:ci
      env:
        CI: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-chromium-${{ github.run_id }}
        path: playwright-report/
        retention-days: 30



  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: always()
    timeout-minutes: 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.19.0'
        cache: 'npm'
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
    
    - name: Generate test summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job status
        unit_status="${{ needs.unit-tests.result }}"
        e2e_status="${{ needs.e2e-tests.result }}"
        
        if [ "$unit_status" = "success" ]; then
          echo "✅ Unit tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "$e2e_status" = "success" ]; then
          echo "✅ E2E tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ E2E tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "Coverage reports are available in the unit-tests job artifacts." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### E2E Test Reports" >> $GITHUB_STEP_SUMMARY
        echo "Playwright reports are available in the respective job artifacts." >> $GITHUB_STEP_SUMMARY 