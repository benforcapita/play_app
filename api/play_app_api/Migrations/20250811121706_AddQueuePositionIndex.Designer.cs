// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using play_app_api.Data;

#nullable disable

namespace play_app_api.Migrations
{
    [DbContext(typeof(AppDb))]
    [Migration("20250811121706_AddQueuePositionIndex")]
    partial class AddQueuePositionIndex
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("play_app_api.AbilityScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "modifier");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "score");

                    b.HasKey("Id");

                    b.ToTable("AbilityScoreValues");

                    b.HasAnnotation("Relational:JsonPropertyName", "wisdom");
                });

            modelBuilder.Entity("play_app_api.AbilityScores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("integer");

                    b.Property<int>("CharismaId")
                        .HasColumnType("integer");

                    b.Property<int>("ConstitutionId")
                        .HasColumnType("integer");

                    b.Property<int>("DexterityId")
                        .HasColumnType("integer");

                    b.Property<int>("IntelligenceId")
                        .HasColumnType("integer");

                    b.Property<int>("StrengthId")
                        .HasColumnType("integer");

                    b.Property<int>("WisdomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterSheetId")
                        .IsUnique();

                    b.HasIndex("CharismaId");

                    b.HasIndex("ConstitutionId");

                    b.HasIndex("DexterityId");

                    b.HasIndex("IntelligenceId");

                    b.HasIndex("StrengthId");

                    b.HasIndex("WisdomId");

                    b.ToTable("AbilityScoresSet");

                    b.HasAnnotation("Relational:JsonPropertyName", "abilityScores");
                });

            modelBuilder.Entity("play_app_api.Appearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "age");

                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("integer");

                    b.Property<string>("Eyes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "eyes");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "gender");

                    b.Property<string>("Hair")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "hair");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "height");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "size");

                    b.Property<string>("Skin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "skin");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "weight");

                    b.HasKey("Id");

                    b.HasIndex("CharacterSheetId")
                        .IsUnique();

                    b.ToTable("Appearances");

                    b.HasAnnotation("Relational:JsonPropertyName", "appearance");
                });

            modelBuilder.Entity("play_app_api.Backstory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlliesAndEnemies")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "alliesAndEnemies");

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "background");

                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("integer");

                    b.Property<string>("Faction")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "faction");

                    b.Property<string>("ImportantEvents")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "importantEvents");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "origin");

                    b.Property<string>("SignificantOthers")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "significantOthers");

                    b.HasKey("Id");

                    b.HasIndex("CharacterSheetId")
                        .IsUnique();

                    b.ToTable("Backstories");

                    b.HasAnnotation("Relational:JsonPropertyName", "backstory");
                });

            modelBuilder.Entity("play_app_api.CarryingCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Encumbered")
                        .HasColumnType("real")
                        .HasAnnotation("Relational:JsonPropertyName", "encumbered");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<float>("PushDragLift")
                        .HasColumnType("real")
                        .HasAnnotation("Relational:JsonPropertyName", "pushDragLift");

                    b.Property<float>("WeightCarried")
                        .HasColumnType("real")
                        .HasAnnotation("Relational:JsonPropertyName", "weightCarried");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId")
                        .IsUnique();

                    b.ToTable("CarryingCapacities");

                    b.HasAnnotation("Relational:JsonPropertyName", "carryingCapacity");
                });

            modelBuilder.Entity("play_app_api.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("play_app_api.CharacterInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alignment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "alignment");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("integer");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "class");

                    b.Property<string>("ClassAndLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "experience");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("NextLevelXp")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "nextLevelXp");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "species");

                    b.Property<string>("Subclass")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "subclass");

                    b.HasKey("Id");

                    b.HasIndex("CharacterSheetId")
                        .IsUnique();

                    b.ToTable("CharacterInfos");

                    b.HasAnnotation("Relational:JsonPropertyName", "characterInfo");
                });

            modelBuilder.Entity("play_app_api.CharacterSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("CharacterSheets");
                });

            modelBuilder.Entity("play_app_api.Combat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArmorClass")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "armorClass");

                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("integer");

                    b.Property<int>("Initiative")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "initiative");

                    b.Property<bool>("Inspiration")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "inspiration");

                    b.Property<int>("ProficiencyBonus")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "proficiencyBonus");

                    b.Property<string>("Speed")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "speed");

                    b.HasKey("Id");

                    b.HasIndex("CharacterSheetId")
                        .IsUnique();

                    b.ToTable("Combats");

                    b.HasAnnotation("Relational:JsonPropertyName", "combat");
                });

            modelBuilder.Entity("play_app_api.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cp")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "cp");

                    b.Property<int>("Ep")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "ep");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<int>("Gp")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "gp");

                    b.Property<int>("Pp")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "pp");

                    b.Property<int>("Sp")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "sp");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasAnnotation("Relational:JsonPropertyName", "currency");
                });

            modelBuilder.Entity("play_app_api.DeathSaves", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CombatId")
                        .HasColumnType("integer");

                    b.Property<int>("Failures")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "failures");

                    b.Property<int>("Successes")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "successes");

                    b.HasKey("Id");

                    b.HasIndex("CombatId")
                        .IsUnique();

                    b.ToTable("DeathSaves");

                    b.HasAnnotation("Relational:JsonPropertyName", "deathSaves");
                });

            modelBuilder.Entity("play_app_api.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterSheetId")
                        .IsUnique();

                    b.ToTable("Equipments");

                    b.HasAnnotation("Relational:JsonPropertyName", "equipment");
                });

            modelBuilder.Entity("play_app_api.ExtractionJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("FileDataUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ResultCharacterId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JobToken")
                        .IsUnique();

                    b.HasIndex("ResultCharacterId");

                    b.HasIndex("JobToken", "OwnerId")
                        .IsUnique();

                    b.HasIndex("OwnerId", "Status", "CreatedAt");

                    b.ToTable("ExtractionJobs");
                });

            modelBuilder.Entity("play_app_api.FeatureTrait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "action");

                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "source");

                    b.Property<string>("Uses")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "uses");

                    b.HasKey("Id");

                    b.HasIndex("CharacterSheetId");

                    b.ToTable("FeaturesAndTraits");

                    b.HasAnnotation("Relational:JsonPropertyName", "featuresAndTraits");
                });

            modelBuilder.Entity("play_app_api.HitDice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CombatId")
                        .HasColumnType("integer");

                    b.Property<string>("Current")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "current");

                    b.Property<string>("Total")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "total");

                    b.HasKey("Id");

                    b.HasIndex("CombatId")
                        .IsUnique();

                    b.ToTable("HitDices");

                    b.HasAnnotation("Relational:JsonPropertyName", "hitDice");
                });

            modelBuilder.Entity("play_app_api.HitPoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CombatId")
                        .HasColumnType("integer");

                    b.Property<int>("Current")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "current");

                    b.Property<int>("Max")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "max");

                    b.Property<int>("Temporary")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "temporary");

                    b.HasKey("Id");

                    b.HasIndex("CombatId")
                        .IsUnique();

                    b.ToTable("HitPoints");

                    b.HasAnnotation("Relational:JsonPropertyName", "hitPoints");
                });

            modelBuilder.Entity("play_app_api.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "quantity");

                    b.Property<float>("Weight")
                        .HasColumnType("real")
                        .HasAnnotation("Relational:JsonPropertyName", "weight");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("Items");

                    b.HasAnnotation("Relational:JsonPropertyName", "items");
                });

            modelBuilder.Entity("play_app_api.PassiveScores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CombatId")
                        .HasColumnType("integer");

                    b.Property<int>("Insight")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "insight");

                    b.Property<int>("Investigation")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "investigation");

                    b.Property<int>("Perception")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "perception");

                    b.HasKey("Id");

                    b.HasIndex("CombatId")
                        .IsUnique();

                    b.ToTable("PassiveScores");

                    b.HasAnnotation("Relational:JsonPropertyName", "passiveScores");
                });

            modelBuilder.Entity("play_app_api.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bonds")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "bonds");

                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("integer");

                    b.Property<string>("Flaws")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "flaws");

                    b.Property<string>("Ideals")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "ideals");

                    b.Property<string>("PersonalityTraits")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "personalityTraits");

                    b.HasKey("Id");

                    b.HasIndex("CharacterSheetId")
                        .IsUnique();

                    b.ToTable("Personas");

                    b.HasAnnotation("Relational:JsonPropertyName", "persona");
                });

            modelBuilder.Entity("play_app_api.Proficiencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<List<string>>("Armor")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "armor");

                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("Languages")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "languages");

                    b.PrimitiveCollection<List<string>>("Tools")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "tools");

                    b.PrimitiveCollection<List<string>>("Weapons")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "weapons");

                    b.HasKey("Id");

                    b.HasIndex("CharacterSheetId")
                        .IsUnique();

                    b.ToTable("Proficiencies");

                    b.HasAnnotation("Relational:JsonPropertyName", "proficiencies");
                });

            modelBuilder.Entity("play_app_api.SavingThrow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Proficient")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "proficient");

                    b.HasKey("Id");

                    b.ToTable("SavingThrowValues");

                    b.HasAnnotation("Relational:JsonPropertyName", "wisdom");
                });

            modelBuilder.Entity("play_app_api.SavingThrows", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("integer");

                    b.Property<int>("CharismaSaveId")
                        .HasColumnType("integer");

                    b.Property<int>("ConstitutionSaveId")
                        .HasColumnType("integer");

                    b.Property<int>("DexteritySaveId")
                        .HasColumnType("integer");

                    b.Property<int>("IntelligenceSaveId")
                        .HasColumnType("integer");

                    b.Property<int>("StrengthSaveId")
                        .HasColumnType("integer");

                    b.Property<int>("WisdomSaveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterSheetId")
                        .IsUnique();

                    b.HasIndex("CharismaSaveId");

                    b.HasIndex("ConstitutionSaveId");

                    b.HasIndex("DexteritySaveId");

                    b.HasIndex("IntelligenceSaveId");

                    b.HasIndex("StrengthSaveId");

                    b.HasIndex("WisdomSaveId");

                    b.ToTable("SavingThrowsSet");

                    b.HasAnnotation("Relational:JsonPropertyName", "savingThrows");
                });

            modelBuilder.Entity("play_app_api.SectionResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<int>("ExtractionJobId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExtractionJobId");

                    b.ToTable("SectionResults");
                });

            modelBuilder.Entity("play_app_api.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ability")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "ability");

                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("integer");

                    b.Property<bool>("Expertise")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "expertise");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "modifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<bool>("Proficient")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "proficient");

                    b.HasKey("Id");

                    b.HasIndex("CharacterSheetId");

                    b.ToTable("Skills");

                    b.HasAnnotation("Relational:JsonPropertyName", "skills");
                });

            modelBuilder.Entity("play_app_api.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Total")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "total");

                    b.Property<int>("Used")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "used");

                    b.HasKey("Id");

                    b.ToTable("Slots");

                    b.HasAnnotation("Relational:JsonPropertyName", "level9");
                });

            modelBuilder.Entity("play_app_api.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackId")
                        .HasColumnType("integer");

                    b.Property<int?>("CantripSpellcastingId")
                        .HasColumnType("integer");

                    b.Property<string>("CastingTime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "castingTime");

                    b.Property<string>("Components")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "components");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "duration");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "range");

                    b.Property<int>("SaveId")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "source");

                    b.Property<string>("SpellType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SpellsKnownSpellcastingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttackId");

                    b.HasIndex("CantripSpellcastingId");

                    b.HasIndex("SaveId");

                    b.HasIndex("SpellsKnownSpellcastingId");

                    b.ToTable("Spells");

                    b.HasAnnotation("Relational:JsonPropertyName", "spellsKnown");
                });

            modelBuilder.Entity("play_app_api.SpellAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Bonus")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "bonus");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "damage");

                    b.HasKey("Id");

                    b.ToTable("SpellAttacks");

                    b.HasAnnotation("Relational:JsonPropertyName", "attack");
                });

            modelBuilder.Entity("play_app_api.SpellSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ability")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "ability");

                    b.Property<int>("Dc")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "dc");

                    b.HasKey("Id");

                    b.ToTable("SpellSaves");

                    b.HasAnnotation("Relational:JsonPropertyName", "save");
                });

            modelBuilder.Entity("play_app_api.SpellSlots", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Level1Id")
                        .HasColumnType("integer");

                    b.Property<int>("Level2Id")
                        .HasColumnType("integer");

                    b.Property<int>("Level3Id")
                        .HasColumnType("integer");

                    b.Property<int>("Level4Id")
                        .HasColumnType("integer");

                    b.Property<int>("Level5Id")
                        .HasColumnType("integer");

                    b.Property<int>("Level6Id")
                        .HasColumnType("integer");

                    b.Property<int>("Level7Id")
                        .HasColumnType("integer");

                    b.Property<int>("Level8Id")
                        .HasColumnType("integer");

                    b.Property<int>("Level9Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Level1Id");

                    b.HasIndex("Level2Id");

                    b.HasIndex("Level3Id");

                    b.HasIndex("Level4Id");

                    b.HasIndex("Level5Id");

                    b.HasIndex("Level6Id");

                    b.HasIndex("Level7Id");

                    b.HasIndex("Level8Id");

                    b.HasIndex("Level9Id");

                    b.ToTable("SpellSlots");

                    b.HasAnnotation("Relational:JsonPropertyName", "spellSlots");
                });

            modelBuilder.Entity("play_app_api.Spellcasting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ability")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "ability");

                    b.Property<int>("AttackBonus")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "attackBonus");

                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("integer");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "class");

                    b.Property<int>("SaveDC")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "saveDC");

                    b.Property<int>("SpellSlotsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterSheetId")
                        .IsUnique();

                    b.HasIndex("SpellSlotsId");

                    b.ToTable("Spellcastings");

                    b.HasAnnotation("Relational:JsonPropertyName", "spellcasting");
                });

            modelBuilder.Entity("play_app_api.AbilityScores", b =>
                {
                    b.HasOne("play_app_api.CharacterSheet", "CharacterSheet")
                        .WithOne("AbilityScores")
                        .HasForeignKey("play_app_api.AbilityScores", "CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.AbilityScore", "Charisma")
                        .WithMany()
                        .HasForeignKey("CharismaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.AbilityScore", "Constitution")
                        .WithMany()
                        .HasForeignKey("ConstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.AbilityScore", "Dexterity")
                        .WithMany()
                        .HasForeignKey("DexterityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.AbilityScore", "Intelligence")
                        .WithMany()
                        .HasForeignKey("IntelligenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.AbilityScore", "Strength")
                        .WithMany()
                        .HasForeignKey("StrengthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.AbilityScore", "Wisdom")
                        .WithMany()
                        .HasForeignKey("WisdomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterSheet");

                    b.Navigation("Charisma");

                    b.Navigation("Constitution");

                    b.Navigation("Dexterity");

                    b.Navigation("Intelligence");

                    b.Navigation("Strength");

                    b.Navigation("Wisdom");
                });

            modelBuilder.Entity("play_app_api.Appearance", b =>
                {
                    b.HasOne("play_app_api.CharacterSheet", "CharacterSheet")
                        .WithOne("Appearance")
                        .HasForeignKey("play_app_api.Appearance", "CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterSheet");
                });

            modelBuilder.Entity("play_app_api.Backstory", b =>
                {
                    b.HasOne("play_app_api.CharacterSheet", "CharacterSheet")
                        .WithOne("Backstory")
                        .HasForeignKey("play_app_api.Backstory", "CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterSheet");
                });

            modelBuilder.Entity("play_app_api.CarryingCapacity", b =>
                {
                    b.HasOne("play_app_api.Equipment", "Equipment")
                        .WithOne("CarryingCapacity")
                        .HasForeignKey("play_app_api.CarryingCapacity", "EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("play_app_api.CharacterInfo", b =>
                {
                    b.HasOne("play_app_api.CharacterSheet", "CharacterSheet")
                        .WithOne("CharacterInfo")
                        .HasForeignKey("play_app_api.CharacterInfo", "CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterSheet");
                });

            modelBuilder.Entity("play_app_api.CharacterSheet", b =>
                {
                    b.HasOne("play_app_api.Character", "Character")
                        .WithOne("Sheet")
                        .HasForeignKey("play_app_api.CharacterSheet", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("play_app_api.Combat", b =>
                {
                    b.HasOne("play_app_api.CharacterSheet", "CharacterSheet")
                        .WithOne("Combat")
                        .HasForeignKey("play_app_api.Combat", "CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterSheet");
                });

            modelBuilder.Entity("play_app_api.Currency", b =>
                {
                    b.HasOne("play_app_api.Equipment", "Equipment")
                        .WithOne("Currency")
                        .HasForeignKey("play_app_api.Currency", "EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("play_app_api.DeathSaves", b =>
                {
                    b.HasOne("play_app_api.Combat", "Combat")
                        .WithOne("DeathSaves")
                        .HasForeignKey("play_app_api.DeathSaves", "CombatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combat");
                });

            modelBuilder.Entity("play_app_api.Equipment", b =>
                {
                    b.HasOne("play_app_api.CharacterSheet", "CharacterSheet")
                        .WithOne("Equipment")
                        .HasForeignKey("play_app_api.Equipment", "CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterSheet");
                });

            modelBuilder.Entity("play_app_api.ExtractionJob", b =>
                {
                    b.HasOne("play_app_api.Character", "ResultCharacter")
                        .WithMany()
                        .HasForeignKey("ResultCharacterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ResultCharacter");
                });

            modelBuilder.Entity("play_app_api.FeatureTrait", b =>
                {
                    b.HasOne("play_app_api.CharacterSheet", "CharacterSheet")
                        .WithMany("FeaturesAndTraits")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterSheet");
                });

            modelBuilder.Entity("play_app_api.HitDice", b =>
                {
                    b.HasOne("play_app_api.Combat", "Combat")
                        .WithOne("HitDice")
                        .HasForeignKey("play_app_api.HitDice", "CombatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combat");
                });

            modelBuilder.Entity("play_app_api.HitPoints", b =>
                {
                    b.HasOne("play_app_api.Combat", "Combat")
                        .WithOne("HitPoints")
                        .HasForeignKey("play_app_api.HitPoints", "CombatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combat");
                });

            modelBuilder.Entity("play_app_api.Item", b =>
                {
                    b.HasOne("play_app_api.Equipment", "Equipment")
                        .WithMany("Items")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("play_app_api.PassiveScores", b =>
                {
                    b.HasOne("play_app_api.Combat", "Combat")
                        .WithOne("PassiveScores")
                        .HasForeignKey("play_app_api.PassiveScores", "CombatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combat");
                });

            modelBuilder.Entity("play_app_api.Persona", b =>
                {
                    b.HasOne("play_app_api.CharacterSheet", "CharacterSheet")
                        .WithOne("Persona")
                        .HasForeignKey("play_app_api.Persona", "CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterSheet");
                });

            modelBuilder.Entity("play_app_api.Proficiencies", b =>
                {
                    b.HasOne("play_app_api.CharacterSheet", "CharacterSheet")
                        .WithOne("Proficiencies")
                        .HasForeignKey("play_app_api.Proficiencies", "CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterSheet");
                });

            modelBuilder.Entity("play_app_api.SavingThrows", b =>
                {
                    b.HasOne("play_app_api.CharacterSheet", "CharacterSheet")
                        .WithOne("SavingThrows")
                        .HasForeignKey("play_app_api.SavingThrows", "CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.SavingThrow", "Charisma")
                        .WithMany()
                        .HasForeignKey("CharismaSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.SavingThrow", "Constitution")
                        .WithMany()
                        .HasForeignKey("ConstitutionSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.SavingThrow", "Dexterity")
                        .WithMany()
                        .HasForeignKey("DexteritySaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.SavingThrow", "Intelligence")
                        .WithMany()
                        .HasForeignKey("IntelligenceSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.SavingThrow", "Strength")
                        .WithMany()
                        .HasForeignKey("StrengthSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.SavingThrow", "Wisdom")
                        .WithMany()
                        .HasForeignKey("WisdomSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterSheet");

                    b.Navigation("Charisma");

                    b.Navigation("Constitution");

                    b.Navigation("Dexterity");

                    b.Navigation("Intelligence");

                    b.Navigation("Strength");

                    b.Navigation("Wisdom");
                });

            modelBuilder.Entity("play_app_api.SectionResult", b =>
                {
                    b.HasOne("play_app_api.ExtractionJob", "ExtractionJob")
                        .WithMany("SectionResults")
                        .HasForeignKey("ExtractionJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtractionJob");
                });

            modelBuilder.Entity("play_app_api.Skill", b =>
                {
                    b.HasOne("play_app_api.CharacterSheet", "CharacterSheet")
                        .WithMany("Skills")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterSheet");
                });

            modelBuilder.Entity("play_app_api.Spell", b =>
                {
                    b.HasOne("play_app_api.SpellAttack", "Attack")
                        .WithMany()
                        .HasForeignKey("AttackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.Spellcasting", "CantripSpellcasting")
                        .WithMany("Cantrips")
                        .HasForeignKey("CantripSpellcastingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("play_app_api.SpellSave", "Save")
                        .WithMany()
                        .HasForeignKey("SaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.Spellcasting", "SpellsKnownSpellcasting")
                        .WithMany("SpellsKnown")
                        .HasForeignKey("SpellsKnownSpellcastingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Attack");

                    b.Navigation("CantripSpellcasting");

                    b.Navigation("Save");

                    b.Navigation("SpellsKnownSpellcasting");
                });

            modelBuilder.Entity("play_app_api.SpellSlots", b =>
                {
                    b.HasOne("play_app_api.Slot", "Level1")
                        .WithMany()
                        .HasForeignKey("Level1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.Slot", "Level2")
                        .WithMany()
                        .HasForeignKey("Level2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.Slot", "Level3")
                        .WithMany()
                        .HasForeignKey("Level3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.Slot", "Level4")
                        .WithMany()
                        .HasForeignKey("Level4Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.Slot", "Level5")
                        .WithMany()
                        .HasForeignKey("Level5Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.Slot", "Level6")
                        .WithMany()
                        .HasForeignKey("Level6Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.Slot", "Level7")
                        .WithMany()
                        .HasForeignKey("Level7Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.Slot", "Level8")
                        .WithMany()
                        .HasForeignKey("Level8Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.Slot", "Level9")
                        .WithMany()
                        .HasForeignKey("Level9Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level1");

                    b.Navigation("Level2");

                    b.Navigation("Level3");

                    b.Navigation("Level4");

                    b.Navigation("Level5");

                    b.Navigation("Level6");

                    b.Navigation("Level7");

                    b.Navigation("Level8");

                    b.Navigation("Level9");
                });

            modelBuilder.Entity("play_app_api.Spellcasting", b =>
                {
                    b.HasOne("play_app_api.CharacterSheet", "CharacterSheet")
                        .WithOne("Spellcasting")
                        .HasForeignKey("play_app_api.Spellcasting", "CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_app_api.SpellSlots", "SpellSlots")
                        .WithMany()
                        .HasForeignKey("SpellSlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterSheet");

                    b.Navigation("SpellSlots");
                });

            modelBuilder.Entity("play_app_api.Character", b =>
                {
                    b.Navigation("Sheet")
                        .IsRequired();
                });

            modelBuilder.Entity("play_app_api.CharacterSheet", b =>
                {
                    b.Navigation("AbilityScores")
                        .IsRequired();

                    b.Navigation("Appearance")
                        .IsRequired();

                    b.Navigation("Backstory")
                        .IsRequired();

                    b.Navigation("CharacterInfo")
                        .IsRequired();

                    b.Navigation("Combat")
                        .IsRequired();

                    b.Navigation("Equipment")
                        .IsRequired();

                    b.Navigation("FeaturesAndTraits");

                    b.Navigation("Persona")
                        .IsRequired();

                    b.Navigation("Proficiencies")
                        .IsRequired();

                    b.Navigation("SavingThrows")
                        .IsRequired();

                    b.Navigation("Skills");

                    b.Navigation("Spellcasting")
                        .IsRequired();
                });

            modelBuilder.Entity("play_app_api.Combat", b =>
                {
                    b.Navigation("DeathSaves")
                        .IsRequired();

                    b.Navigation("HitDice")
                        .IsRequired();

                    b.Navigation("HitPoints")
                        .IsRequired();

                    b.Navigation("PassiveScores")
                        .IsRequired();
                });

            modelBuilder.Entity("play_app_api.Equipment", b =>
                {
                    b.Navigation("CarryingCapacity")
                        .IsRequired();

                    b.Navigation("Currency")
                        .IsRequired();

                    b.Navigation("Items");
                });

            modelBuilder.Entity("play_app_api.ExtractionJob", b =>
                {
                    b.Navigation("SectionResults");
                });

            modelBuilder.Entity("play_app_api.Spellcasting", b =>
                {
                    b.Navigation("Cantrips");

                    b.Navigation("SpellsKnown");
                });
#pragma warning restore 612, 618
        }
    }
}
